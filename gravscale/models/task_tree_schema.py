# coding: utf-8

"""
    Gravscale Public Restful API

    API pública da Gravscale oferece aos usuários a capacidade de se autenticar, visualizar e contratar produtos disponíveis, enviar dados de contratação, escolher formas de pagamento e gerenciar nossos produtos. Além disso, os usuários podem cadastrar chaves SSH e realizar o deploy de um sistema operacional de forma eficiente e segura. Esta API foi projetado para simplificar e agilizar o gerenciamento de recursos proporcionando que a a Gravscale forneça uma experiência integrada e intuitiva para os usuários.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gravscale.models.task_schema import TaskSchema
from typing import Optional, Set
from typing_extensions import Self


class TaskTreeSchema(BaseModel):
    """
    TaskTreeSchema
    """  # noqa: E501

    id: StrictStr
    status: StrictStr
    action: Optional[StrictStr] = None
    result: Optional[Dict[str, Any]] = None
    correlation_id: Optional[StrictStr] = Field(default=None, alias="correlationId")
    client_id: Optional[StrictInt] = Field(default=None, alias="clientId")
    email: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    percentage_complete: Optional[StrictInt] = Field(
        default=0, alias="percentageComplete"
    )
    sub_tasks: Optional[List[TaskSchema]] = Field(default=None, alias="subTasks")
    __properties: ClassVar[List[str]] = [
        "id",
        "status",
        "action",
        "result",
        "correlationId",
        "clientId",
        "email",
        "error",
        "createdAt",
        "updatedAt",
        "percentageComplete",
        "subTasks",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskTreeSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sub_tasks (list)
        _items = []
        if self.sub_tasks:
            for _item in self.sub_tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["subTasks"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskTreeSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "status": obj.get("status"),
                "action": obj.get("action"),
                "result": obj.get("result"),
                "correlationId": obj.get("correlationId"),
                "clientId": obj.get("clientId"),
                "email": obj.get("email"),
                "error": obj.get("error"),
                "createdAt": obj.get("createdAt"),
                "updatedAt": obj.get("updatedAt"),
                "percentageComplete": obj.get("percentageComplete")
                if obj.get("percentageComplete") is not None
                else 0,
                "subTasks": [TaskSchema.from_dict(_item) for _item in obj["subTasks"]]
                if obj.get("subTasks") is not None
                else None,
            }
        )
        return _obj
